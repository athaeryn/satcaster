#! /usr/bin/env python3

import sys
import time

import numpy as np
from PIL import Image

from vec3 import vec3

from lib.camera import Camera
from lib.sphere import Sphere


def get_intersection(ray, sphere):
    (vantage, direction) = ray
    displacement = sphere.pos - vantage
    a = np.linalg.norm(direction) ** 2
    b = 2 * np.dot(direction, displacement)
    c = np.linalg.norm(displacement) ** 2 - sphere.r ** 2
    radicand = b * b - 4 * a * c

    if radicand >= 0:
        return 1
    else:
        return 0


def render(w, h, camera, objects):
    image = Image.new("1", (w, h))
    for y in range(h):
        for x in range (w):
            nx = (2 * (x + .5) / w) - 1
            ny = 1 - (2 * (y + .5) / h)
            direc = vec3(nx, ny, 0) + camera.pos + camera.direction
            direc = direc / np.linalg.norm(direc)
            ray = (camera.pos, direc)
            intersections = [get_intersection(ray, obj) for obj in objects]
            pixel = 1 in intersections
            image.putpixel((x, y), pixel)
    return image


if __name__ == "__main__":
    spheres = []
    spheres.append(Sphere(vec3(-0.4422, -0.45858, -10), 3.411))
    spheres.append(Sphere(vec3(8.00697, 2.52354, -13.31947), 0.751))
    cam = Camera(vec3(0, 0, 0))
    cam.lookat(vec3(0, 0, -10))

    frame = render(500, 500, cam, spheres)
    frame.save("./renders/" + str(int(time.time())) + ".bmp")
